{"ast":null,"code":"class Out {\n  static async post() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    headers[\"Content-Type\"] = \"application/json\";\n\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    }\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      // include, *same-origin, omit\n      headers,\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n\n    if (response.body === null) {\n      return response.ok;\n    }\n\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n\n  static async get() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    //let head = 'accept: \"text/plain\"';\n    headers.accept = \"text/plain\";\n\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    } // Default options are marked with *\n\n\n    const response = await fetch(url, {\n      method: \"GET\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\",\n      // include, *same-origin, omit\n      headers\n    });\n\n    if (response.body === null || !response.ok) {\n      console.log(\"null as f\");\n      return null;\n    }\n\n    return response.json();\n  }\n\n}\n\nexport default Out;","map":{"version":3,"sources":["/Users/maayan/Projects/Sermo_V2-1/SermoMain/src/dataBase/Out.js"],"names":["Out","post","url","data","headers","key","value","Object","entries","response","fetch","method","mode","cache","credentials","body","JSON","stringify","ok","json","get","accept","console","log"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACW,eAAJC,IAAI,GAAoC;AAAA,QAAnCC,GAAmC,uEAA7B,EAA6B;AAAA,QAAzBC,IAAyB,uEAAlB,EAAkB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjDA,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;;AACA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAA3B,EAAoD;AAChDA,MAAAA,OAAO,CAACC,GAAR,GAAcC,KAAd;AACH;;AACD,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAM;AAC9BS,MAAAA,MAAM,EAAE,MADsB;AACd;AAChBC,MAAAA,IAAI,EAAE,MAFwB;AAEhB;AACdC,MAAAA,KAAK,EAAE,UAHuB;AAI9BC,MAAAA,WAAW,EAAE,aAJiB;AAIF;AAC5BV,MAAAA,OAL8B;AAM9BW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,IAAf,CANwB,CAMF;;AANE,KAAN,CAA5B;;AAQA,QAAIM,QAAQ,CAACM,IAAT,KAAkB,IAAtB,EAA4B;AACxB,aAAON,QAAQ,CAACS,EAAhB;AACH;;AACD,WAAOT,QAAQ,CAACU,IAAT,EAAP,CAhBiD,CAgBzB;AAC3B;;AAEe,eAAHC,GAAG,GAAyB;AAAA,QAAxBlB,GAAwB,uEAAlB,EAAkB;AAAA,QAAdE,OAAc,uEAAJ,EAAI;AACrC;AACAA,IAAAA,OAAO,CAACiB,MAAR,GAAiB,YAAjB;;AACA,SAAK,MAAM,CAAChB,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAA3B,EAAoD;AAChDA,MAAAA,OAAO,CAACC,GAAR,GAAcC,KAAd;AACH,KALoC,CAMrC;;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAM;AAC9BS,MAAAA,MAAM,EAAE,KADsB;AACf;AACfC,MAAAA,IAAI,EAAE,MAFwB;AAEhB;AACdC,MAAAA,KAAK,EAAE,UAHuB;AAGX;AACnBC,MAAAA,WAAW,EAAE,aAJiB;AAIF;AAC5BV,MAAAA;AAL8B,KAAN,CAA5B;;AAOA,QAAIK,QAAQ,CAACM,IAAT,KAAkB,IAAlB,IAA0B,CAACN,QAAQ,CAACS,EAAxC,EAA4C;AACxCI,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAO,IAAP;AACH;;AACD,WAAOd,QAAQ,CAACU,IAAT,EAAP;AACH;;AAvCK;;AA0CV,eAAenB,GAAf","sourcesContent":["class Out {\n    static async post(url = \"\", data = {}, headers = {}) {\n        headers[\"Content-Type\"] = \"application/json\";\n        for (const [key, value] of Object.entries(headers)) {\n            headers.key = value;\n        }\n        const response = await fetch(url, {\n            method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\", // no-cors, *cors, same-origin\n            cache: \"no-cache\",\n            credentials: \"same-origin\", // include, *same-origin, omit\n            headers,\n            body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n        });\n        if (response.body === null) {\n            return response.ok;\n        }\n        return response.json(); // parses JSON response into native JavaScript objects\n    }\n\n    static async get(url = \"\", headers = {}) {\n        //let head = 'accept: \"text/plain\"';\n        headers.accept = \"text/plain\";\n        for (const [key, value] of Object.entries(headers)) {\n            headers.key = value;\n        }\n        // Default options are marked with *\n        const response = await fetch(url, {\n            method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\", // no-cors, *cors, same-origin\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: \"same-origin\", // include, *same-origin, omit\n            headers,\n        });\n        if (response.body === null || !response.ok) {\n            console.log(\"null as f\");\n            return null;\n        }\n        return response.json();\n    }\n}\n\nexport default Out;"]},"metadata":{},"sourceType":"module"}