{"ast":null,"code":"import Out from \"./Out\";\n\nclass User {\n  constructor(userName, nickName, server) {\n    let token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    this.userName = userName;\n    this.nickName = nickName;\n    this.server = server;\n    this.token = token;\n  }\n\n  async addContact(contact) {\n    if (!contact) {\n      console.log(\"contact is undefined\");\n    } else {\n      Out.post(\"https://\" + this.server + \"/api/contacts\", {\n        id: contact.getName(),\n        name: contact.getNickName(),\n        server: contact.getServer()\n      }, {\n        Authorization: \"BearerP\" + this.token\n      });\n\n      if (this.getServer() !== contact.getServer()) {\n        Out.post(\"https://\" + contact.server + \"/api/invitations\", {\n          id: this.getName(),\n          name: contact.getName(),\n          server: this.getServer()\n        }, {\n          Authorization: \"Bearer \" + this.token\n        });\n      }\n    }\n\n    return this;\n  }\n\n  getName() {\n    return this.userName;\n  }\n\n  getNickName() {\n    return this.nickName;\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  async getContacts() {\n    let response = await Out.get(\"https://\" + this.server + \"/api/contacts\", {\n      Authorization: \"Bearer \" + this.token\n    });\n    let contacts = [];\n\n    if (response !== null && response !== undefined && response.length !== 0) {\n      response.forEach(x => {\n        contacts.push(new User(x.id, x.name, x.server));\n      });\n    }\n\n    return contacts;\n  }\n\n  async getMessages(contactName) {\n    let messages = [];\n    let response = await Out.get(\"https://\" + this.getServer() + \"/api/\" + contactName + \"/messages\", {\n      Authorization: \"Bearer \" + this.token\n    });\n\n    if (response === null || response === undefined || response.length === 0) {\n      return [];\n    }\n\n    response.forEach(msg => {\n      messages.push({\n        type: \"text\",\n        content: msg.content,\n        user: msg.sent ? this.userName : contactName,\n        date: new Date(msg.created)\n      });\n    });\n    return messages;\n  }\n\n  async sendMessage(content, contact) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"text\";\n    await Out.post(\"https://\" + this.getServer() + \"/api/contacts/\" + contact.getName() + \"/messages\", {\n      content: content\n    }, {\n      Authorization: \"Bearer \" + this.token\n    });\n\n    if (contact.getServer() !== this.getServer()) {\n      await Out.post(\"https://\" + contact.getServer() + \"/api/transfer\", {\n        from: this.getName(),\n        to: contact.getName(),\n        content: content\n      }, {\n        Authorization: \"Bearer \" + this.token\n      });\n    }\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/maayan/Projects/Sermo_V2-1/SermoMain/src/dataBase/User.js"],"names":["Out","User","constructor","userName","nickName","server","token","addContact","contact","console","log","post","id","getName","name","getNickName","getServer","Authorization","getContacts","response","get","contacts","undefined","length","forEach","x","push","getMessages","contactName","messages","msg","type","content","user","sent","date","Date","created","sendMessage","from","to"],"mappings":"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","sourcesContent":["import Out from \"./Out\";\n\nclass User {\n  constructor(userName, nickName, server, token = \"\") {\n    this.userName = userName;\n    this.nickName = nickName;\n    this.server = server;\n    this.token = token;\n  }\n\n  async addContact(contact) {\n    if (!contact) {\n      console.log(\"contact is undefined\");\n    } else {\n      Out.post(\n        \"https://\" + this.server + \"/api/contacts\",\n        {\n          id: contact.getName(),\n          name: contact.getNickName(),\n          server: contact.getServer(),\n        },\n        { Authorization: \"BearerP\" + this.token }\n      );\n      if (this.getServer() !== contact.getServer()) {\n        Out.post(\n          \"https://\" + contact.server + \"/api/invitations\",\n          {\n            id: this.getName(),\n            name: contact.getName(),\n            server: this.getServer(),\n          },\n          { Authorization: \"Bearer \" + this.token }\n        );\n      }\n    }\n    return this;\n  }\n\n  getName() {\n    return this.userName;\n  }\n\n  getNickName() {\n    return this.nickName;\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  async getContacts() {\n    let response = await Out.get(\"https://\" + this.server + \"/api/contacts\", {\n      Authorization: \"Bearer \" + this.token,\n    });\n    let contacts = [];\n    if (response !== null && response !== undefined && response.length !== 0) {\n      response.forEach((x) => {\n        contacts.push(new User(x.id, x.name, x.server));\n      });\n    }\n    return contacts;\n  }\n\n  async getMessages(contactName) {\n    let messages = [];\n    let response = await Out.get(\n      \"https://\" + this.getServer() + \"/api/\" + contactName + \"/messages\",\n      { Authorization: \"Bearer \" + this.token }\n    );\n    if (response === null || response === undefined || response.length === 0) {\n      return [];\n    }\n    response.forEach((msg) => {\n      messages.push({\n        type: \"text\",\n        content: msg.content,\n        user: msg.sent ? this.userName : contactName,\n        date: new Date(msg.created),\n      });\n    });\n\n    return messages;\n  }\n\n  async sendMessage(content, contact, type = \"text\") {\n    await Out.post(\n      \"https://\" +\n        this.getServer() +\n        \"/api/contacts/\" +\n        contact.getName() +\n        \"/messages\",\n      {\n        content: content,\n      },\n      { Authorization: \"Bearer \" + this.token }\n    );\n    if (contact.getServer() !== this.getServer()) {\n      await Out.post(\n        \"https://\" + contact.getServer() + \"/api/transfer\",\n        {\n          from: this.getName(),\n          to: contact.getName(),\n          content: content,\n        },\n        { Authorization: \"Bearer \" + this.token }\n      );\n    }\n  }\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}