{"ast":null,"code":"class Out {\n  static async post() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // let head = '\"Content-Type\": \"application/json\"';\n    headers[\"Content-Type\"] = \"application/json\";\n\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    } // Default options are marked with *\n\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      headers,\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n    return response.ok;\n  }\n\n  static async login() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // let head = '\"Content-Type\": \"application/json\"';\n    headers[\"Content-Type\"] = \"application/json\";\n\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    } // Default options are marked with *\n\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      headers,\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n\n    if (response.body === null) {\n      return response.ok;\n    }\n\n    return response.text();\n  }\n\n  static async get() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    //let head = 'accept: \"text/plain\"';\n    headers.accept = \"text/plain\";\n\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    } // Default options are marked with *\n\n\n    const response = await fetch(url, {\n      method: \"GET\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      headers\n    });\n\n    if (response.body === null || !response.ok) {\n      return null;\n    }\n\n    return response.json();\n  }\n\n}\n\nexport default Out;","map":{"version":3,"sources":["/Users/maayan/Projects/Sermo/SermoReact/src/dataBase/Out.js"],"names":["Out","post","url","data","headers","key","value","Object","entries","response","fetch","method","mode","body","JSON","stringify","ok","login","text","get","accept","json"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACS,eAAJC,IAAI,GAAoC;AAAA,QAAnCC,GAAmC,uEAA7B,EAA6B;AAAA,QAAzBC,IAAyB,uEAAlB,EAAkB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACnD;AACAA,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;;AACA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAA3B,EAAoD;AAClDA,MAAAA,OAAO,CAACC,GAAR,GAAcC,KAAd;AACD,KALkD,CAMnD;;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAM;AAChCS,MAAAA,MAAM,EAAE,MADwB;AAChB;AAChBC,MAAAA,IAAI,EAAE,MAF0B;AAElB;AACdR,MAAAA,OAHgC;AAIhCS,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAJ0B,CAIJ;;AAJI,KAAN,CAA5B;AAMA,WAAOM,QAAQ,CAACO,EAAhB;AACD;;AAEiB,eAALC,KAAK,GAAoC;AAAA,QAAnCf,GAAmC,uEAA7B,EAA6B;AAAA,QAAzBC,IAAyB,uEAAlB,EAAkB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpD;AACAA,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;;AACA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAA3B,EAAoD;AAClDA,MAAAA,OAAO,CAACC,GAAR,GAAcC,KAAd;AACD,KALmD,CAMpD;;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAM;AAChCS,MAAAA,MAAM,EAAE,MADwB;AAChB;AAChBC,MAAAA,IAAI,EAAE,MAF0B;AAElB;AACdR,MAAAA,OAHgC;AAIhCS,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAJ0B,CAIJ;;AAJI,KAAN,CAA5B;;AAMA,QAAIM,QAAQ,CAACI,IAAT,KAAkB,IAAtB,EAA4B;AAC1B,aAAOJ,QAAQ,CAACO,EAAhB;AACD;;AACD,WAAOP,QAAQ,CAACS,IAAT,EAAP;AACD;;AAEe,eAAHC,GAAG,GAAyB;AAAA,QAAxBjB,GAAwB,uEAAlB,EAAkB;AAAA,QAAdE,OAAc,uEAAJ,EAAI;AACvC;AACAA,IAAAA,OAAO,CAACgB,MAAR,GAAiB,YAAjB;;AACA,SAAK,MAAM,CAACf,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAA3B,EAAoD;AAClDA,MAAAA,OAAO,CAACC,GAAR,GAAcC,KAAd;AACD,KALsC,CAMvC;;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAM;AAChCS,MAAAA,MAAM,EAAE,KADwB;AACjB;AACfC,MAAAA,IAAI,EAAE,MAF0B;AAElB;AACdR,MAAAA;AAHgC,KAAN,CAA5B;;AAKA,QAAIK,QAAQ,CAACI,IAAT,KAAkB,IAAlB,IAA0B,CAACJ,QAAQ,CAACO,EAAxC,EAA4C;AAC1C,aAAO,IAAP;AACD;;AACD,WAAOP,QAAQ,CAACY,IAAT,EAAP;AACD;;AApDO;;AAuDV,eAAerB,GAAf","sourcesContent":["class Out {\n  static async post(url = \"\", data = {}, headers = {}) {\n    // let head = '\"Content-Type\": \"application/json\"';\n    headers[\"Content-Type\"] = \"application/json\";\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    }\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      headers,\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    });\n    return response.ok;\n  }\n\n  static async login(url = \"\", data = {}, headers = {}) {\n    // let head = '\"Content-Type\": \"application/json\"';\n    headers[\"Content-Type\"] = \"application/json\";\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    }\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      headers,\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    });\n    if (response.body === null) {\n      return response.ok;\n    }\n    return response.text();\n  }\n\n  static async get(url = \"\", headers = {}) {\n    //let head = 'accept: \"text/plain\"';\n    headers.accept = \"text/plain\";\n    for (const [key, value] of Object.entries(headers)) {\n      headers.key = value;\n    }\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      headers,\n    });\n    if (response.body === null || !response.ok) {\n      return null;\n    }\n    return response.json();\n  }\n}\n\nexport default Out;\n"]},"metadata":{},"sourceType":"module"}