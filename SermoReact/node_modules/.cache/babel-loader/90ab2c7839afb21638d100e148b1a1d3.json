{"ast":null,"code":"var _jsxFileName = \"/Users/maayan/Projects/Sermo/SermoReact/src/chatPage/Chat.js\",\n    _s = $RefreshSig$();\n\nimport ContactCard from \"./ContactCard\";\nimport SubChat from \"./SubChat\";\nimport MessageForm from \"./MessageForm\";\nimport Col from \"react-bootstrap/Col\";\nimport { useEffect, useState } from \"react\";\nimport { HubConnectionBuilder, HubConnectionState } from \"@microsoft/signalr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat(props) {\n  _s();\n\n  const [activeContact, setActiveContact] = props.active;\n  const [msgs, setMsgs] = useState(null);\n  const user = props.user;\n  const [connection, setConnection] = useState(null);\n  useEffect(() => {\n    const newConnection = new HubConnectionBuilder().withUrl(\"https://localhost:7217/MsgHub\").withAutomaticReconnect().build();\n    setConnection(newConnection);\n  }, []);\n  useEffect(() => {\n    if (connection && connection.state === HubConnectionState.Disconnected) {\n      connection.start().then(result => {\n        console.log(\"Connected!\");\n        connection.on(\"ReceiveMessage\", (from, message) => {\n          const update = async () => {\n            const newMsgs = await user.getMessages(activeContact.getName());\n            setMsgs(newMsgs);\n          };\n\n          update();\n          update();\n          update(); // if (activeContact.getName() === from) {\n          //   const msg = {\n          //     type: \"text\",\n          //     content: message.content,\n          //     user: activeContact.getName(),\n          //     date: new Date(message.created),\n          //   };\n          //   const newMsgs = msgs.slice();\n          //   newMsgs.push(msg);\n          //   setMsgs(newMsgs);\n          // }\n        });\n      }).catch(e => console.log(\"Connection failed: \", e));\n    }\n  }, [connection, activeContact, msgs, user]);\n\n  const sendMessage = (to, message) => {\n    if (connection.state === HubConnectionState.Connected) {\n      try {\n        connection.invoke(\"SendMessage\", to, message);\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      alert(\"No connection to server yet.\");\n    }\n  };\n\n  useEffect(() => {\n    async function getMsgs() {\n      const msgs = await user.getMessages(activeContact.getName());\n      setMsgs(msgs);\n    }\n\n    getMsgs();\n  }, [activeContact, user]);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    children: [/*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"~/lib/dist/browser/signalr.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"~/js/ws.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactCard, {\n      contact: activeContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubChat, {\n      messages: msgs,\n      userName: user.getName()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n      id: \"inside-card\",\n      active: [activeContact, setActiveContact],\n      user: user,\n      messages: [msgs, setMsgs],\n      sendMsg: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"8Lkqr1x/yPe6tpi8CYX50VJBSs0=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/maayan/Projects/Sermo/SermoReact/src/chatPage/Chat.js"],"names":["ContactCard","SubChat","MessageForm","Col","useEffect","useState","HubConnectionBuilder","HubConnectionState","Chat","props","activeContact","setActiveContact","active","msgs","setMsgs","user","connection","setConnection","newConnection","withUrl","withAutomaticReconnect","build","state","Disconnected","start","then","result","console","log","on","from","message","update","newMsgs","getMessages","getName","catch","e","sendMessage","to","Connected","invoke","alert","getMsgs"],"mappings":"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","sourcesContent":["import ContactCard from \"./ContactCard\";\nimport SubChat from \"./SubChat\";\nimport MessageForm from \"./MessageForm\";\nimport Col from \"react-bootstrap/Col\";\nimport { useEffect, useState } from \"react\";\nimport { HubConnectionBuilder, HubConnectionState } from \"@microsoft/signalr\";\n\nfunction Chat(props) {\n  const [activeContact, setActiveContact] = props.active;\n  const [msgs, setMsgs] = useState(null);\n  const user = props.user;\n  const [connection, setConnection] = useState(null);\n\n  useEffect(() => {\n    const newConnection = new HubConnectionBuilder()\n      .withUrl(\"https://localhost:7217/MsgHub\")\n      .withAutomaticReconnect()\n      .build();\n\n    setConnection(newConnection);\n  }, []);\n\n  useEffect(() => {\n    if (connection && connection.state === HubConnectionState.Disconnected) {\n      connection\n        .start()\n        .then((result) => {\n          console.log(\"Connected!\");\n\n          connection.on(\"ReceiveMessage\", (from, message) => {\n            const update = async () => {\n              const newMsgs = await user.getMessages(activeContact.getName());\n              setMsgs(newMsgs);\n            };\n            update();\n            update();\n            update();\n            // if (activeContact.getName() === from) {\n            //   const msg = {\n            //     type: \"text\",\n            //     content: message.content,\n            //     user: activeContact.getName(),\n            //     date: new Date(message.created),\n            //   };\n            //   const newMsgs = msgs.slice();\n            //   newMsgs.push(msg);\n            //   setMsgs(newMsgs);\n            // }\n          });\n        })\n        .catch((e) => console.log(\"Connection failed: \", e));\n    }\n  }, [connection, activeContact, msgs, user]);\n\n  const sendMessage = (to, message) => {\n    if (connection.state === HubConnectionState.Connected) {\n      try {\n        connection.invoke(\"SendMessage\", to, message);\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      alert(\"No connection to server yet.\");\n    }\n  };\n\n  useEffect(() => {\n    async function getMsgs() {\n      const msgs = await user.getMessages(activeContact.getName());\n      setMsgs(msgs);\n    }\n    getMsgs();\n  }, [activeContact, user]);\n  return (\n    <Col>\n      <script src=\"~/lib/dist/browser/signalr.js\"></script>\n      <script src=\"~/js/ws.js\"></script>\n      <ContactCard contact={activeContact} />\n      <SubChat messages={msgs} userName={user.getName()} />\n      <MessageForm\n        id=\"inside-card\"\n        active={[activeContact, setActiveContact]}\n        user={user}\n        messages={[msgs, setMsgs]}\n        sendMsg={sendMessage}\n      />\n    </Col>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}